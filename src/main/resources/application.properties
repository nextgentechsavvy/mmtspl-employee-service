spring.application.name=mmtspl-employee-service

server.port:9000
server.address=0.0.0.0
server.ipv4.address.localhost=localhost
server.ipv4.address.dynamic=192.168.35.13

#eureka.server.port:8761

settings.cors_origin_localhost:http://localhost:5000
settings.cors_origin_localhost_global:http://localhost:5012
settings.cors_origin:${server.ipv4.address.dynamic}:5000
#spring.mvc.view.prefix: /WEB-INF/
#spring.mvc.view.suffix: .jsp

#logging.level.root=DEBUG
# Database
#db.url: jdbc:mysql://${server.ipv4.address.localhost}:3306/mmtspl_db?allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false
db.url: jdbc:mysql://${server.ipv4.address.dynamic}/nextgentechsavvy_db?allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false
db.driver:com.mysql.jdbc.Driver
db.username: mmtspl
db.password: mmtspl
 
# Hibernate
hibernate.dialect:org.hibernate.dialect.MySQL5Dialect
hibernate.show_sql:true
#hibernate.hbm2ddl.auto:create
hibernate.hbm2ddl.auto:none
entitymanager.packagesToScan:com

spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# Cloud Config DB Service Url's -- Zull API Gateway Call
# http://localhost:8765/mmtspl-cloud-config-db-service/cloud-config-db-service/mysql-db-cloud-urls

cloud.config.db.service.zullAPIGatewayHTTP:http
cloud.config.db.service.zullAPIGatewayIP:localhost
cloud.config.db.service.zullAPIGatewayPort:8765
cloud.config.db.service.dbServiceApplicationName:mmtspl-cloud-config-db-service

# Cloud Config DB Service Url's -- REST API Call
#mySQLBDUrlsService.Uri: http://${server.address}:9008/cloud-config-db-service/mysql-db-cloud-urls
cloud.config.db.service.baseUrl:http://${server.address}:
cloud.config.db.service.port:9008
cloud.config.db.service.mySQLBDUrlsServiceUri:/cloud-config-db-service/mysql-db-cloud-urls

#eureka.client.service-url.default-zone=http://${server.address}:${eureka.server.port}/eureka

# Cloud Config Service Url's
rest.request.mapping=/restapiemployeeservices
rest.get.mapping.employeeservices = /employeeservices
rest.get.mapping.getAllEmployee = /getAllEmployee
rest.get.mapping.getEmployeeById = /getEmployeeById/{employeeId}
rest.post.mapping.addEmployee = /addEmployee
rest.put.mapping.updateEmployee = /updateEmployee
rest.put.mapping.updateEmployeeById = /updateEmployeeById/{employeeId}
rest.get.mapping.deleteEmployee = /deleteEmployee/{employeeId}
rest.get.mapping.getEmployeeByName = /getEmployeeByName/{employeeName}


rest.patch.mapping.updateEmployeeByAddress = /updateEmployeeByAddress/{employeeId}
rest.get.mapping.getEmpDeptDetailsByEmpId = /getEmpDeptDetailsByEmpId/{employeeID}


#//------------ Get All Employee Details from Employee DB, Address DB and Department DB --------------------------//

rest.get.mapping.getAllEmployeeDetails = /getEmployeeCompleteDetails

#//Docker-k8s Calling
#rest.get.url.employeeIDListFromAddress = http://${server.ipv4.address.dynamic}:30902/restapiaddressservices/getAllAddressEmployeeID
#rest.get.url.addressByEmployeeID = http://${server.ipv4.address.dynamic}:30902/restapiaddressservices/getAddressByEmployeeID/
#rest.get.url.departmentByEmployeeID = http://${server.ipv4.address.dynamic}:30901/restapidepartmentservices/getDepartmentByEmployeeID/
#rest.get.url.allDepartmentEmployeeID = http://${server.ipv4.address.dynamic}:30901/restapidepartmentservices/getAllDepartmentEmployeeID

#//REST Calling
rest.get.url.employeeIDListFromAddress = http://${server.ipv4.address.dynamic}:9002/restapiaddressservices/getAllAddressEmployeeID
rest.get.url.addressByEmployeeID = http://${server.ipv4.address.dynamic}:9002/restapiaddressservices/getAddressByEmployeeID/
rest.get.url.departmentByEmployeeID = http://${server.ipv4.address.dynamic}:9001/restapidepartmentservices/getDepartmentByEmployeeID/
rest.get.url.allDepartmentEmployeeID = http://${server.ipv4.address.dynamic}:9001/restapidepartmentservices/getAllDepartmentEmployeeID


#//------------ Get All Employee Details from Employee DB, Address DB and Department DB --------------------------//


